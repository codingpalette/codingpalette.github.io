{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/python","result":{"pageContext":{"currentCategory":"python","categories":["All","python","코딩테스트","mac","homebrew","react","markdown","css"],"edges":[{"node":{"id":"7119fa76-3206-502b-bcde-3de79b3c91bb","excerpt":"파이썬의 내장 함수는 모듈이나 패키지를 가져오지 않고 바로 사용할 수 있는 함수입니다. 1.abs 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수 입니다. 2.all 반복 가능한 객체의 요소가 모두 참이면 True, 거짓이 하나라도 있으면 False를 돌려줍니다. 0은 거짓이므로 때문에 두 번째 프린트는 False를 리턴 합니다. 3.any 반복 가능한 객체의 요소가 하나라도 참이면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려줍니다. all(x)의 반대라고 생각하시면 됩니다. 0, \"\" 2개 모두 거짓이므로 두 번째 프린트는 False를 리턴 합니다. 4.chr ASCII 코드값에 해당하는 문자를 반환 합니다. 5.divmod a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려 줍니다. 6.filter 반복 가능한 객체에서 특정 조건에 맞는 요소만 가지고 옵니다. 7.map 반복 가능한 객체의 요소를 지정된 함수로 처리한 뒤 map 객체를 반환 합니다…","fields":{"slug":"/python-built-in-function/"},"frontmatter":{"categories":"python","title":"python 내장 함수","date":"November 16, 2022"}},"next":{"fields":{"slug":"/python-challenges1/"}},"previous":null},{"node":{"id":"e56a0eeb-282a-55ca-ad17-0f85a9dd79db","excerpt":"1.신고 결과 받기 문제 설명 신입사원 무지는 게시판 불량 이용자를 신고하고 처리 결과를 메일로 발송하는 시스템을 개발하려 합니다. 무지가 개발하려는 시스템은 다음과 같습니다. 각 유저는 한 번에 한 명의 유저를 신고할 수 있습니다. 신고 횟수에 제한은 없습니다. 서로 다른 유저를 계속해서 신고할 수 있습니다. 한 유저를 여러 번 신고할 수도 있지만, 동일한 유저에 대한 신고 횟수는 1회로 처리됩니다. k번 이상 신고된 유저는 게시판 이용이 정지되며, 해당 유저를 신고한 모든 유저에게 정지 사실을 메일로 발송합니다. 유저가 신고한 모든 내용을 취합하여 마지막에 한꺼번에 게시판 이용 정지를 시키면서 정지 메일을 발송합니다. 다음은 전체 유저 목록이 [“muzi”, “frodo”, “apeach”, “neo”]이고, k = 2(즉, 2번 이상 신고당하면 이용 정지)인 경우의 예시입니다. 유저 ID 유저가 신고한 ID 설명 “muzi” “frodo” “muzi”가 “frodo”를 신고했…","fields":{"slug":"/python-challenges1/"},"frontmatter":{"categories":"python 코딩테스트","title":"python 코딩테스트 - 신고 결과 받기","date":"September 19, 2022"}},"next":{"fields":{"slug":"/python-basics3/"}},"previous":{"fields":{"slug":"/python-built-in-function/"}}},{"node":{"id":"1dae0f93-1c65-57e4-9468-5f57e09e1e8e","excerpt":"1.while 반복해서 문장을 수행해야 할 경우 while문을 사용합니다. 그래서 while문을 반복문이라고도 부릅니다. 1-1.while 기본구조 1-2.while break while문은 조건문이 참인 동안 계속해서 while문 안의 내용을 반복적으로 수행합니다. 하지만 강제로 while문을 빠져나가고 싶을 때가 있으면 break를 이용하면 됩니다. result_even 는 짝수만 더하다가 더한 결과 값이 1000을 넘었을때 break가 걸리도록 하는 코드 입니다. 1-2.while continue while 반복문을 돌다가 특정 조건을 만족할때, 아래 코드는 무시하고 바로 반복문의 맨위로 올라가고 싶을때가 있을 수 있습니다.\n즉 중간에서 바로 맨 처음으로 올라가는 기능을 하는, 키워드 continue 입니다. 2.for for문은 while문과 달리 지정한 횟수만큼을 반복할 때 주로 사용됩니다. 리스트, 문자열, 튜플 등 컬랙션 타입의 아이템을 하나씩 순회하면서 사용합니다. …","fields":{"slug":"/python-basics3/"},"frontmatter":{"categories":"python","title":"python 기초3","date":"September 05, 2022"}},"next":{"fields":{"slug":"/python-basics2/"}},"previous":{"fields":{"slug":"/python-challenges1/"}}},{"node":{"id":"0822ddf7-8415-51ad-ab44-0e6db2cb4f2e","excerpt":"1.리스트 리스트는 여러 요소들을 갖는 집합(컬렉션)으로 새로운 요소를 추가하거나 갱신, 삭제하는 일이 가능합니다. 파이썬의 리스트는 동적배열(Dynamic Array)로서 자유롭게 확장할 수 있는 구조를 가지고 있습니다. 리스트는 그 안의 요소(element)들은 그 값을 자유롭게 변경할 수 있는 Mutable 데이터 타입입니다. 1-1.리스트 만들기 리스트를 사용하면 1, 3, 5, 7, 9 숫자 모음을 다음과 같이 간단하게 표현할 수 있습니다. 1-2.리스트 값 찾기 몇 번째 리스트에 어떤 값이 있는지 알려면 아래와 같이 해주시면 됩니다. 1-3.리스트 연산하기 리스트 더하기 리스트 반복하기 리스트 길이 구하기 특정 개수가 몇개인지 구하기 특정 값이 몇번째에 있는지 구하기 1-4.리스트 추가,수정,삭제 append 로 리스트 추가 append(x)는 리스트의 맨 마지막에 x를 추가하는 함수 입니다. insert 로 리스트 추가 insert(a, b)는 리스트의 a번째 위치에 …","fields":{"slug":"/python-basics2/"},"frontmatter":{"categories":"python","title":"python 기초2","date":"September 04, 2022"}},"next":{"fields":{"slug":"/python-basics1/"}},"previous":{"fields":{"slug":"/python-basics3/"}}},{"node":{"id":"2c12e772-4d12-5e1c-aeea-69c660924b2b","excerpt":"테스트를 하기 앞서 저는 이전 파이썬 가상환경 만들기 에서 코드를 작성하도록 하겠습니다.  으로 가상환경을 실행시켜 주시고 라는 파일을 생성합니다. 생성이 완료 되었으면 라고 입력한 뒤 터미널에서  라고 입력하시고 아래 이미지 처럼 나오시면 정상적으로 준비가 완료 된 것 입니다.  아래 코드들을 입력하시고 확인하고 싶으시면  라고 입력하시면 됩니다. 1.주석 및 프린트 1-1.주석 주석처리는  으로 하면 주석이 됩니다. 1-2.프린트 프린트 출력은 으로 출력이 가능합니다. 2.변수 2-1.변수 할당 cat_name이라는 변수에 나비라는 문자열을 할당해 보겠습니다. 2-2.숫자 계산 변수에 숫자를 담아 사칙연산을 해보도록 하겠습니다. 2-3.변수 + 텍스트 출력 변수와 텍스트를 합칠때는 앞에 (한줄일 때) 또는 (여러줄일 때)를 활용하면 됩니다. 3.연산자 3-1.산술 연산자 a = 10, b = 20, c = 3 이라고 하면 Operator Description Example + …","fields":{"slug":"/python-basics1/"},"frontmatter":{"categories":"python","title":"python 기초1","date":"September 03, 2022"}},"next":{"fields":{"slug":"/python-venv/"}},"previous":{"fields":{"slug":"/python-basics2/"}}},{"node":{"id":"b8706932-ec5b-5e66-87dc-efb48a00d355","excerpt":"1.가상환경 생성 python 3.3 이상의 버전 부터는 venv 모듈을 내장하고 있으므로 따로 설치없이 가능합니다. 터미널을 열어 자신이 개발하려는 workspace 폴더에 가서 아래 명령어를 입력합니다.  venv은 가상환경 이름이므로 자유롭게 쓰면 됩니다.  해당 구문을 실행하면 위 이미지 처럼 venv이름을 가진 가상 환경 폴더가 생성 됩니다. 2.가상환경 실행 생성을 했으면 해당 가상환경을 실행해야 합니다. 실행 소스 파일은 가상 환경 폴더 안의 bin폴더 안에 있습니다.  source 명령어를 통해 activate파일을 실행시켜 가상환경에 진입합니다.  위 이미지처럼 terminal 앞쪽에 **(venv)**같이 가상환경의 이름이 붙으면 진입에 성공한 것 입니다.   명령어를 통해 설치된 패키지 버전들을 확인해보면 pip와 setuptools 빼고는 아무것도 설치가 안된 깨끗한 상태임을 확인할 수 있습니다. python3로 가상환경을 만들고 진입했으면 pip3 대신  명…","fields":{"slug":"/python-venv/"},"frontmatter":{"categories":"python","title":"python 가상환경","date":"September 02, 2022"}},"next":{"fields":{"slug":"/homebrew-install/"}},"previous":{"fields":{"slug":"/python-basics1/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}